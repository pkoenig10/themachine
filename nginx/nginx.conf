events {}

http {
    server_tokens off;

    log_format default '$remote_addr - $user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '$request_length $request_time '
                       '$host $upstream';
    access_log /var/log/nginx/logs/access.log default;

    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE+CHACHA20:ECDHE+AESGCM;
    ssl_prefer_server_ciphers on;

    ssl_session_cache shared:SSL:10m;

    ssl_stapling on;
    ssl_stapling_verify on;

    resolver 127.0.0.11 valid=10s ipv6=off;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    map $host $upstream {
        auth.$DOMAIN            oidc;
        downloads.$DOMAIN       transmission;
        movies.$DOMAIN          radarr;
        plex.$DOMAIN            plex;
        radarr.$DOMAIN          radarr;
        search.$DOMAIN          jackett;
        sonarr.$DOMAIN          sonarr;
        stats.$DOMAIN           tautulli;
        tv.$DOMAIN              sonarr;
        transmission.$DOMAIN    transmission;
        default                 unknown;
    }

    map $upstream $proxy_uri {
        jackett         jackett:9117;
        oidc            oidc:80;
        plex            plex:32400;
        tautulli        tautulli:8181;
        sonarr          sonarr:8989;
        radarr          radarr:7878;
        transmission    transmission:9091;
    }

    map $upstream $group {
        jackett         users;
        oidc            admins;
        plex            users;
        tautulli        admins;
        sonarr          users;
        radarr          users;
        transmission    users;
    }

    map $auth_request_subject $user {
        default $auth_request_subject;
        ''      unknown;
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;

    server {
        listen 443 ssl http2;
        server_name auth.$DOMAIN;

        location / {
            proxy_pass http://$proxy_uri;
        }
    }

    server {
        listen 443 ssl http2;
        server_name
            downloads.$DOMAIN
            movies.$DOMAIN
            plex.$DOMAIN
            search.$DOMAIN
            stats.$DOMAIN
            tv.$DOMAIN;

        set $auth_uri oidc:80;

        location = /_auth {
            proxy_pass http://$auth_uri/auth?group=$group;
        }

        location = /_login {
            proxy_pass http://$auth_uri/login?redirect=https://$host$request_uri;
        }

        location / {
            proxy_pass http://$proxy_uri;

            auth_request /_auth;
            error_page 401 = /_login;

            auth_request_set $auth_request_subject $upstream_http_x_subject;
            auth_request_set $auth_request_set_cookie $upstream_http_set_cookie;

            add_header Set-Cookie $auth_request_set_cookie;
        }
    }

    server {
        listen 443 ssl http2;
        server_name
            radarr.$DOMAIN
            sonarr.$DOMAIN;

        location /api/ {
            proxy_pass http://$proxy_uri;
        }

        location / {
            return 444;
        }
    }

    server {
        listen 443 ssl http2;
        server_name transmission.$DOMAIN;

        location = /transmission/rpc {
            proxy_pass http://$proxy_uri;

            auth_basic Transmission;
            auth_basic_user_file /etc/nginx/.htpasswd;
        }

        location / {
            return 444;
        }
    }

    server {
        listen 80;
        server_name .$DOMAIN;

        access_log off;

        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name $DOMAIN;

        access_log off;

        return 302 https://stats.$DOMAIN;
    }

    server {
        listen 80 default_server;
        listen 443 ssl http2 default_server;

        return 444;
    }
}
